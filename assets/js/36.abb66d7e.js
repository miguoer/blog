(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{435:function(t,a,r){"use strict";r.r(a);var s=r(42),v=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"面向切面编程思想"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#面向切面编程思想"}},[t._v("#")]),t._v(" 面向切面编程思想")]),t._v(" "),r("h2",{attrs:{id:"solid设计原则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#solid设计原则"}},[t._v("#")]),t._v(" SOLID设计原则")]),t._v(" "),r("p",[t._v("程序设计领域, SOLID（单一功能、开闭原则、里式替换、接口隔离以及依赖反转）指代了面向对象编程和面向对象设计的五个基本原则。当这些原则被一起应用时，它们使得一个程序员能开发一个容易进行软件维护和扩展的系统。SOLID是敏捷开发的重要组成部分。")]),t._v(" "),r("ul",[r("li",[t._v("S Single Responsibility Principle。单一功能原则")]),t._v(" "),r("li",[t._v("O Open Close Principle。 开闭原则")]),t._v(" "),r("li",[t._v("L Liskov Substitution Principle 里氏替换原则。")]),t._v(" "),r("li",[t._v("I。Interface Segregation Principle 接口隔离原则。")]),t._v(" "),r("li",[t._v("D Dependency Inversion Principle 依赖反转。")])]),t._v(" "),r("h3",{attrs:{id:"s-单一功能原则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#s-单一功能原则"}},[t._v("#")]),t._v(" S 单一功能原则")]),t._v(" "),r("p",[t._v("单一功能原则认为对象应该仅具有一种单一功能的概念。")]),t._v(" "),r("p",[t._v("换句话说就是让一个类只做一种类型责任。当这个类需要承担其它类型的责任的时候，就要分解这个类。在所有SOLID原则中，这个大多数开发人员最能理解的一条，同时也可能是违反最频繁的一条原则。单一原则可以看作是低耦合、高内聚在面向对象原则上的引申，将责任定义为引起变化的原因，以提高内聚性来减少引起变化的原因。单一责任通常意味着单一的功能，不要为一个模块实现过多的功能点，以保证实体只有一个引起它变化的原因。")]),t._v(" "),r("h3",{attrs:{id:"o-开闭原则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#o-开闭原则"}},[t._v("#")]),t._v(" O 开闭原则")]),t._v(" "),r("p",[t._v("开闭原则认为 软件对扩展是开放的，对修改是封闭的。")]),t._v(" "),r("p",[t._v("通俗的讲，开指的是类、模块、函数应该具有可扩展性，闭指的是他们不应该被修改。也就是说可以新增功能，但不能去修改源码。")]),t._v(" "),r("p",[t._v("抽象类中抽象方法就是这个作用。")]),t._v(" "),r("h3",{attrs:{id:"l-里氏替换原则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#l-里氏替换原则"}},[t._v("#")]),t._v(" L 里氏替换原则")]),t._v(" "),r("p",[t._v("所有基类出现的地方都可以用派生类替换而不会程序产生错误。子类可以扩展父类的功能，但不能改变父类原有的功能。例如机动车必须有轮胎和发动机，子类宝马和奔驰不应该改写没轮胎或者没发动机。")]),t._v(" "),r("h3",{attrs:{id:"接口隔离原则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#接口隔离原则"}},[t._v("#")]),t._v(" 接口隔离原则")]),t._v(" "),r("p",[t._v("类不应该依赖不需要的接口，知道越少越好。例如电话接口只约束接电话和挂电话，不需要让依赖者知道还有通讯录。")]),t._v(" "),r("h3",{attrs:{id:"d-依赖反转原则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#d-依赖反转原则"}},[t._v("#")]),t._v(" D 依赖反转原则")]),t._v(" "),r("p",[t._v("依赖倒置原则规定，代码应当取决于抽象概念而不是具体实现。")]),t._v(" "),r("p",[t._v("高层模块不应该依赖于低层模块，二者都应该依赖于抽象。\n抽象不应该依赖于细节，细节应该依赖于抽象。")]),t._v(" "),r("p",[t._v("依赖注入有两种方式，设值注入和构造注入。")]),t._v(" "),r("h2",{attrs:{id:"面向切面编程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#面向切面编程"}},[t._v("#")]),t._v(" 面向切面编程")]),t._v(" "),r("p",[t._v("AOP是Aspect Oriented Programming的缩写，通过预编译方式和运行时动态代理实现程序功能统一维护的一种技术。AOP是OOP的延续，是Spring框架的一个重要内容，也是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务之间的耦合度降低，提高程序的可重用性，同时提高了开发效率。")])])}),[],!1,null,null,null);a.default=v.exports}}]);